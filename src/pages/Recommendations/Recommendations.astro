---
import Modal from "../../components/Modal/Modal.astro";
import RecommendationIcon from "../../assets/recommendations.svg";

const cardId = "recommendations";
const SUPABASE_ANON_KEY = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

interface Recommendation {
  id: string;
  name: string;
  relationship: string;
  company: string;
  text: string;
  date: string;
}

let recommendations: Recommendation[] = [];
---

<Modal
  cardId={cardId}
  cardTitle="Recommendations"
  cardIcon={RecommendationIcon.src}
  modalOverlayId="recommendationsModalOverlay"
  modalContentId="recommendationsModalContent"
  modalHeaderId="recommendationsModalHeader"
  closeModalId="recommendationsCloseModal"
  cardElementId="recommendationsCard"
  maxWidth="700px"
  maxHeight="80vh"
>
  <div class="flex flex-col w-full">
    <h2 class="mt-4 mb-6 text-[#fcf5e5] text-[2rem] font-bold text-center">
      Professional Recommendations
    </h2>
    <div class="mb-8">
      <h3 class="mb-4 text-[#fcf5e5] text-xl font-semibold text-center">
        What People Say
      </h3>
      <div id="recommendationsLoading" class="text-center py-8">
        <div class="flex justify-center items-center">
          <svg
            class="animate-spin h-6 w-6 text-[#ffb347] mr-2"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          <p class="text-gray-400">Loading recommendations...</p>
        </div>
      </div>
      <div
        id="recommendationsContainer"
        class="space-y-4 hidden max-h-60 pr-2 no-scrollbar"
      >
      </div>
      <div id="emptyState" class="text-center py-8 hidden">
        <div class="text-gray-400 text-center">
          <svg
            class="w-12 h-12 mx-auto mb-4 opacity-50"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
            ></path>
          </svg>
          <p class="text-lg font-medium mb-2">No recommendations yet</p>
          <p class="text-sm">Be the first to leave a recommendation!</p>
        </div>
      </div>
      <div id="errorState" class="text-center py-8 hidden">
        <div class="text-red-400 text-center">
          <svg
            class="w-12 h-12 mx-auto mb-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"
            ></path>
          </svg>
          <p class="text-lg font-medium mb-2">Error loading recommendations</p>
          <button
            id="retryButton"
            class="text-[#ffb347] hover:text-[#e69d29] underline text-sm"
          >
            Try again
          </button>
        </div>
      </div>
    </div>
    <div
      class="p-6 bg-[#1c1c25] rounded-lg shadow-[0_2px_8px_rgba(0,0,0,0.15)]"
    >
      <h3 class="mb-4 text-[#fcf5e5] text-xl font-semibold text-center">
        Add Your Recommendation
      </h3>
      <form id="recommendationForm" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="name" class="block mb-1 text-[#fcf5e5]">Your Name</label
            >
            <input
              type="text"
              id="name"
              name="name"
              required
              class="w-full p-2 bg-[#2d2d2d] text-white border border-gray-700 rounded-md focus:border-[#ffb347] focus:outline-none focus:ring-1 focus:ring-[#ffb347]"
            />
          </div>
          <div>
            <label for="relationship" class="block mb-1 text-[#fcf5e5]"
              >Relationship</label
            >
            <input
              type="text"
              id="relationship"
              name="relationship"
              placeholder="e.g., Colleague, Manager, Client"
              required
              class="w-full p-2 bg-[#2d2d2d] text-white border border-gray-700 rounded-md focus:border-[#ffb347] focus:outline-none focus:ring-1 focus:ring-[#ffb347]"
            />
          </div>
        </div>
        <div>
          <label for="company" class="block mb-1 text-[#fcf5e5]">Company</label>
          <input
            type="text"
            id="company"
            name="company"
            required
            class="w-full p-2 bg-[#2d2d2d] text-white border border-gray-700 rounded-md focus:border-[#ffb347] focus:outline-none focus:ring-1 focus:ring-[#ffb347]"
          />
        </div>
        <div>
          <label for="recommendationText" class="block mb-1 text-[#fcf5e5]"
            >Your Recommendation</label
          >
          <textarea
            id="recommendationText"
            name="recommendationText"
            rows="4"
            required
            placeholder="Share your experience working with this person..."
            class="w-full p-2 bg-[#2d2d2d] text-white border border-gray-700 rounded-md focus:border-[#ffb347] focus:outline-none focus:ring-1 focus:ring-[#ffb347] resize-none"
          ></textarea>
        </div>
        <div class="flex justify-end">
          <button
            type="submit"
            id="submitButton"
            class="px-6 py-2 bg-[#ffb347] text-gray-900 font-medium rounded-md transition-all border-b-4 border-[#e69d29] hover:border-b-0 hover:translate-y-1 active:translate-y-2 active:border-b-0 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:border-b-4 disabled:hover:translate-y-0 flex items-center"
          >
            <span id="buttonText">Submit Recommendation</span>
            <span id="loadingSpinner" class="hidden ml-2">
              <svg
                class="animate-spin h-4 w-4"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            </span>
          </button>
        </div>
      </form>
      <div id="formResponse" class="mt-4 hidden"></div>
    </div>
  </div>
</Modal>

<style>
  .no-scrollbar {
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
</style>

<script define:vars={{ SUPABASE_ANON_KEY }}>
  let isLoading = false;
  async function loadRecommendations() {
    if (isLoading) return;
    isLoading = true;
    const loadingDiv = document.getElementById("recommendationsLoading");
    const containerDiv = document.getElementById("recommendationsContainer");
    const emptyStateDiv = document.getElementById("emptyState");
    const errorStateDiv = document.getElementById("errorState");
    loadingDiv?.classList.remove("hidden");
    containerDiv?.classList.add("hidden");
    emptyStateDiv?.classList.add("hidden");
    errorStateDiv?.classList.add("hidden");
    try {
      const response = await fetch(
        "https://oppvcbhjmvkvqksvzisw.supabase.co/functions/v1/get-recommendations",
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${SUPABASE_ANON_KEY}`,
          },
        }
      );
      if (response.ok) {
        const data = await response.json();
        const recommendations = data.recommendations || [];
        loadingDiv?.classList.add("hidden");
        if (recommendations.length === 0) {
          emptyStateDiv?.classList.remove("hidden");
        } else {
          if (containerDiv) {
            containerDiv.innerHTML = recommendations
              .map(
                (rec) => `
                <div class="p-4 bg-[#2d2d2d] rounded-lg shadow-[0_2px_8px_rgba(0,0,0,0.15)] border-l-4 border-[#ffb347] hover:bg-[#323238] transition-colors">
                  <div class="mb-3">
                    <p class="text-[#fff5ee] italic leading-relaxed">"${rec.text || ""}"</p>
                  </div>
                  <div class="flex justify-between items-end">
                    <div>
                      <p class="text-white font-medium">${rec.name || "Anonymous"}</p>
                      <p class="text-gray-400 text-sm">${rec.relationship || ""} ${rec.company ? `at ${rec.company}` : ""}</p>
                    </div>
                    <p class="text-gray-400 text-xs">${rec.date ? new Date(rec.date).toLocaleDateString() : ""}</p>
                  </div>
                </div>
              `
              )
              .join("");
            containerDiv.classList.remove("hidden");
          }
        }
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      loadingDiv?.classList.add("hidden");
      errorStateDiv?.classList.remove("hidden");
    } finally {
      isLoading = false;
    }
  }
  function showFormMessage(message, isError = false) {
    const responseDiv = document.getElementById("formResponse");
    if (responseDiv) {
      responseDiv.innerHTML = `<p class="text-${isError ? "red" : "green"}-500 text-center">${message}</p>`;
      responseDiv.classList.remove("hidden");
      setTimeout(
        () => {
          responseDiv.classList.add("hidden");
        },
        isError ? 5000 : 3000
      );
    }
  }
  function resetSubmitButton() {
    const submitButton = document.getElementById("submitButton");
    const buttonText = document.getElementById("buttonText");
    const loadingSpinner = document.getElementById("loadingSpinner");
    if (submitButton && buttonText && loadingSpinner) {
      submitButton.disabled = false;
      buttonText.textContent = "Submit Recommendation";
      loadingSpinner.classList.add("hidden");
    }
  }
  document.addEventListener("DOMContentLoaded", () => {
    loadRecommendations();
    const retryButton = document.getElementById("retryButton");
    if (retryButton) {
      retryButton.addEventListener("click", loadRecommendations);
    }
    const form = document.getElementById("recommendationForm");
    const submitButton = document.getElementById("submitButton");
    const buttonText = document.getElementById("buttonText");
    const loadingSpinner = document.getElementById("loadingSpinner");
    if (form && submitButton && buttonText && loadingSpinner) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        submitButton.disabled = true;
        buttonText.textContent = "Sending...";
        loadingSpinner.classList.remove("hidden");
        const formData = new FormData(form);
        const recommendation = {
          name: formData.get("name")?.toString().trim() || "",
          relationship: formData.get("relationship")?.toString().trim() || "",
          company: formData.get("company")?.toString().trim() || "",
          text: formData.get("recommendationText")?.toString().trim() || "",
          date: new Date().toISOString().split("T")[0],
        };
        if (!recommendation.name || !recommendation.text) {
          showFormMessage("Please fill in all required fields.", true);
          resetSubmitButton();
          return;
        }
        try {
          const response = await fetch(
            "https://oppvcbhjmvkvqksvzisw.supabase.co/functions/v1/recommendations",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${SUPABASE_ANON_KEY}`,
              },
              body: JSON.stringify(recommendation),
            }
          );
          if (response.ok) {
            showFormMessage("Thank you for your recommendation!");
            form.reset();
            setTimeout(() => {
              loadRecommendations();
            }, 1000);
          } else {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(
              errorData.error ||
                `HTTP ${response.status}: Failed to submit recommendation`
            );
          }
        } catch (error) {
          showFormMessage(
            "Error submitting recommendation. Please try again.",
            true
          );
        } finally {
          resetSubmitButton();
        }
      });
    }
    const modalOverlay = document.getElementById("recommendationsModalOverlay");
    if (modalOverlay) {
      let wasOpen = false;
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (
            mutation.type === "attributes" &&
            mutation.attributeName === "style"
          ) {
            const isOpen =
              modalOverlay.style.display !== "none" &&
              !modalOverlay.classList.contains("hidden");
            if (isOpen && !wasOpen) {
              setTimeout(loadRecommendations, 100);
            }
            wasOpen = isOpen;
          }
        });
      });
      observer.observe(modalOverlay, { attributes: true });
    }
  });
</script>
