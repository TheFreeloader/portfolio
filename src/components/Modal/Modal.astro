---
import CloseButton from "../Buttons/CloseButton.astro";

interface Props {
  cardId: string;
  cardTitle: string;
  cardIcon: string;
  modalOverlayId: string;
  modalContentId: string;
  modalHeaderId: string;
  closeModalId: string;
  cardElementId: string;
  maxWidth?: string;
  maxHeight?: string;
  excludeFromDrag?: string[];
}

const {
  cardId,
  cardTitle,
  cardIcon,
  modalOverlayId,
  modalContentId,
  modalHeaderId,
  closeModalId,
  cardElementId,
  maxWidth = "600px",
  maxHeight = "50vh",
  excludeFromDrag = [],
} = Astro.props;

import Card from "../Card/Card.astro";
---

<div>
  <div class="cursor-pointer" id={cardElementId}>
    <Card title={cardTitle} icon={cardIcon} cardId={cardId} />
  </div>

  <div
    class="hidden z-[1000] fixed pointer-events-none [&.visible]:block"
    id={modalOverlayId}
    style="top: 50%; left: 50%; transform: translate(-50%, -50%);"
  >
    <div
      class="overflow-visible
        w-[30vw]
        p-8
        bg-gray-950
        border-gray-500 border-1 rounded-2xl
        pointer-events-auto
        relative translate-x-0 translate-y-0
        font-['Poppins',sans-serif] before:content-[''] before:absolute before:-top-[7px] before:-left-[7px] before:-right-[7px] before:-bottom-[7px] before:-z-10 before:bg-transparent before:rounded-lg before:pointer-events-none"
      id={modalContentId}
    >
      <div
        class="z-10
          w-full h-[50px]
          bg-[rgba(0,0,0,0.1)]
          border-b-2 border-dashed border-[rgba(252,245,229,0.5)]
          cursor-move transition-colors
          absolute top-0 left-0 hover:border-b-[rgba(252,245,229,0.8)] duration-200 modal_header"
        id={modalHeaderId}
      >
      </div>

      <CloseButton id={closeModalId} />

      <div
        class="z-[5] overflow-y-auto overflow-x-hidden flex flex-col
          pt-2 p-1
          select-none
          relative -m-[5px] [scrollbar-width:none] [-ms-overflow-style:none] [&::-webkit-scrollbar]:hidden"
        style={`max-height: calc(${maxHeight} - 70px);`}
      >
        <slot />
      </div>
    </div>
  </div>
</div>

<script
  is:inline
  define:vars={{
    cardId,
    cardElementId,
    modalOverlayId,
    closeModalId,
    modalContentId,
    modalHeaderId,
    excludeFromDrag,
  }}
>
  const configKey = `modalConfig_${cardId}`;
  window[configKey] = {
    cardId,
    cardElementId,
    modalOverlayId,
    closeModalId,
    modalContentId,
    modalHeaderId,
    excludeFromDrag,
  };

  function initThisModal() {
    import("/src/scripts/modalHandler.client.ts")
      .then((module) => {
        module.initializeModal(window[configKey]);
      })
      .catch((error) => {
        console.error(`Failed to load modal handler for ${cardId}:`, error);
      });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initThisModal);
  } else {
    setTimeout(initThisModal, 0);
  }
</script>

<style>
  .dragging {
    user-select: none;
  }

  .modal_svg rect {
    stroke: #362b14;
    stroke-width: 7;
    fill: transparent;
    stroke-dasharray: 778;
    stroke-dashoffset: 0;
  }
</style>
